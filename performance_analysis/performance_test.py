#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Telegram –±–æ—Ç–∞
–û—Ü–µ–Ω–∏–≤–∞–µ—Ç RPS (Requests Per Second) –∏ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞
"""

import asyncio
import aiohttp
import time
import statistics
from typing import List, Dict
import json

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∞
LOGIC_API_URL = "http://localhost:8000/handle_update"
API_TOKEN = "b1e7c2f4-8a3d-4e2a-9c6b-7d2e5f1a9b3c"
HEADERS = {"Authorization": f"Bearer {API_TOKEN}"}

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
TEST_PAYLOADS = [
    {
        "user_id": "test_user_1",
        "username": "test_user",
        "first_name": "Test",
        "text": "/start",
        "chat_id": 123456789
    },
    {
        "user_id": "test_user_2", 
        "username": "test_user",
        "first_name": "Test",
        "text": "–ú–æ—Å–∫–≤–∞",
        "chat_id": 123456789
    },
    {
        "user_id": "test_user_3",
        "username": "test_user", 
        "first_name": "Test",
        "text": "Zara",
        "chat_id": 123456789
    },
    {
        "user_id": "test_user_4",
        "username": "test_user",
        "first_name": "Test", 
        "text": "üîç –ò—Å–∫–∞—Ç—å",
        "chat_id": 123456789
    }
]

async def make_request(session: aiohttp.ClientSession, payload: Dict) -> Dict:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –∫ API"""
    start_time = time.time()
    try:
        async with session.post(LOGIC_API_URL, json=payload, headers=HEADERS) as response:
            response_data = await response.json()
            duration = time.time() - start_time
            return {
                "success": response.status == 200,
                "duration": duration,
                "status_code": response.status,
                "response_size": len(json.dumps(response_data))
            }
    except Exception as e:
        duration = time.time() - start_time
        return {
            "success": False,
            "duration": duration,
            "error": str(e)
        }

async def concurrent_test(num_requests: int, concurrency: int) -> Dict:
    """–¢–µ—Å—Ç —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ —É—Ä–æ–≤–Ω–µ–º –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç–∏"""
    print(f"–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {num_requests} –∑–∞–ø—Ä–æ—Å–æ–≤, –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç—å: {concurrency}")
    
    async with aiohttp.ClientSession() as session:
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        tasks = []
        for i in range(num_requests):
            payload = TEST_PAYLOADS[i % len(TEST_PAYLOADS)].copy()
            payload["user_id"] = f"test_user_{i}"
            tasks.append(make_request(session, payload))
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        start_time = time.time()
        semaphore = asyncio.Semaphore(concurrency)
        
        async def limited_request(task):
            async with semaphore:
                return await task
        
        results = await asyncio.gather(*[limited_request(task) for task in tasks])
        total_time = time.time() - start_time
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    successful_requests = [r for r in results if r["success"]]
    failed_requests = [r for r in results if not r["success"]]
    
    if successful_requests:
        durations = [r["duration"] for r in successful_requests]
        response_sizes = [r.get("response_size", 0) for r in successful_requests]
        
        stats = {
            "total_requests": num_requests,
            "successful_requests": len(successful_requests),
            "failed_requests": len(failed_requests),
            "success_rate": len(successful_requests) / num_requests * 100,
            "total_time": total_time,
            "rps": len(successful_requests) / total_time,
            "avg_response_time": statistics.mean(durations),
            "min_response_time": min(durations),
            "max_response_time": max(durations),
            "median_response_time": statistics.median(durations),
            "avg_response_size": statistics.mean(response_sizes) if response_sizes else 0,
            "errors": [r.get("error") for r in failed_requests if "error" in r]
        }
    else:
        stats = {
            "total_requests": num_requests,
            "successful_requests": 0,
            "failed_requests": len(failed_requests),
            "success_rate": 0,
            "total_time": total_time,
            "rps": 0,
            "errors": [r.get("error") for r in failed_requests if "error" in r]
        }
    
    return stats

async def load_test():
    """–ù–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —Ç–µ—Å—Ç —Å —Ä–∞–∑–Ω—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç–∏"""
    print("=== –ù–ê–ì–†–£–ó–û–ß–ù–´–ô –¢–ï–°–¢ TELEGRAM –ë–û–¢–ê ===\n")
    
    test_scenarios = [
        {"requests": 10, "concurrency": 1},
        {"requests": 50, "concurrency": 5},
        {"requests": 100, "concurrency": 10},
        {"requests": 200, "concurrency": 20},
        {"requests": 500, "concurrency": 50},
        {"requests": 1000, "concurrency": 100},
    ]
    
    results = []
    
    for scenario in test_scenarios:
        print(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º: {scenario['requests']} –∑–∞–ø—Ä–æ—Å–æ–≤, {scenario['concurrency']} –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã—Ö")
        result = await concurrent_test(scenario["requests"], scenario["concurrency"])
        results.append({**scenario, **result})
        
        print(f"  RPS: {result['rps']:.2f}")
        print(f"  –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {result['success_rate']:.1f}%")
        print(f"  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {result.get('avg_response_time', 0):.3f}—Å")
        print(f"  –û–±—â–µ–µ –≤—Ä–µ–º—è: {result['total_time']:.2f}—Å")
        if result.get("errors"):
            print(f"  –û—à–∏–±–∫–∏: {len(result['errors'])}")
        print()
        
        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        await asyncio.sleep(2)
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å–≤–æ–¥–∫—É
    print("=== –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê ===")
    for result in results:
        print(f"RPS: {result['rps']:.2f} | "
              f"–ó–∞–ø—Ä–æ—Å—ã: {result['total_requests']} | "
              f"–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç—å: {result['concurrency']} | "
              f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {result['success_rate']:.1f}% | "
              f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {result.get('avg_response_time', 0):.3f}—Å")
    
    # –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—Ç–∞–±–∏–ª—å–Ω—ã–π RPS
    stable_results = [r for r in results if r['success_rate'] >= 95]
    if stable_results:
        max_stable_rps = max(r['rps'] for r in stable_results)
        print(f"\nüéØ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ô –°–¢–ê–ë–ò–õ–¨–ù–´–ô RPS: {max_stable_rps:.2f}")
    else:
        print("\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω—ã–π RPS (—É—Å–ø–µ—à–Ω–æ—Å—Ç—å < 95%)")

async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API"""
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API...")
    async with aiohttp.ClientSession() as session:
        try:
            payload = TEST_PAYLOADS[0].copy()
            payload["user_id"] = "health_check"
            result = await make_request(session, payload)
            if result["success"]:
                print("‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω")
                return True
            else:
                print(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {result.get('error', 'Unknown error')}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False

if __name__ == "__main__":
    async def main():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
        if not await health_check():
            print("API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:8000")
            return
        
        print()
        await load_test()
    
    asyncio.run(main()) 