"""
–®–∞–±–ª–æ–Ω –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ü–µ–Ω—Ç—Ä–æ–≤
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –∫–∞–∫ –æ—Å–Ω–æ–≤—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤
"""

import re
import json
from bs4 import BeautifulSoup

def parse_mall_stores(html_file_path):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤
    
    Args:
        html_file_path (str): –ü—É—Ç—å –∫ HTML —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏ –¢–¶
    
    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤
    """
    
    # –ß–∏—Ç–∞–µ–º HTML —Ñ–∞–π–ª
    with open(html_file_path, 'r', encoding='utf-8') as file:
        html_content = file.read()
    
    # –ü–∞—Ä—Å–∏–º HTML
    soup = BeautifulSoup(html_content, 'html.parser')
    
    # TODO: –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¢–¶
    # –ü—Ä–∏–º–µ—Ä –¥–ª—è 2GIS:
    store_entries = soup.find_all('div', class_='_1kf6gff')
    
    stores = {}
    
    for entry in store_entries:
        # TODO: –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞
        name_link = entry.find('a', class_='_1rehek')
        if not name_link:
            continue
            
        name_span = name_link.find('span', class_='_lvwrwt')
        if not name_span:
            continue
            
        store_name = name_span.get_text(strip=True)
        store_name = re.sub(r'\s+', ' ', store_name).strip()
        
        if not store_name:
            continue
        
        # TODO: –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —ç—Ç–∞–∂–∞
        floor_div = entry.find('div', class_='_klarpw')
        floor_num = 1  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        if floor_div:
            floor_text = floor_div.get_text(strip=True)
            floor_match = re.search(r'(\d+)\s*—ç—Ç–∞–∂', floor_text)
            if floor_match:
                floor_num = int(floor_match.group(1))
        
        stores[store_name] = floor_num
    
    return stores

def format_mall_data(mall_name, stores, address, map_link, underground):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è malls.json
    
    Args:
        mall_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞
        stores (dict): –°–ª–æ–≤–∞—Ä—å –º–∞–≥–∞–∑–∏–Ω–æ–≤
        address (str): –ê–¥—Ä–µ—Å –¢–¶
        map_link (str): –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç—É
        underground (str): –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Ç—Ä–æ
    
    Returns:
        dict: –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¢–¶
    """
    
    mall_data = {
        mall_name: {
            "address": address,
            "map_link": map_link,
            "underground": underground,
            "stores": stores
        }
    }
    
    return mall_data

def save_results(mall_data, output_file):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON —Ñ–∞–π–ª
    
    Args:
        mall_data (dict): –î–∞–Ω–Ω—ã–µ –¢–¶
        output_file (str): –ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
    """
    
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(mall_data, f, ensure_ascii=False, indent=2)
    
    print(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_file}")

def main():
    """
    –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞
    """
    
    # TODO: –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¢–¶
    html_file = "example_mall.txt"  # –ü—É—Ç—å –∫ HTML —Ñ–∞–π–ª—É
    mall_name = "–ù–∞–∑–≤–∞–Ω–∏–µ –¢–¶"
    address = "–ê–¥—Ä–µ—Å –¢–¶"
    map_link = "https://yandex.ru/maps/..."
    underground = "‚ìÇÔ∏è–°—Ç–∞–Ω—Ü–∏—è | üö∂ X –º–∏–Ω | üöå Y –º–∏–Ω"
    output_file = "example_mall_stores.json"
    
    print(f"–ü–∞—Ä—Å–∏–Ω–≥ {mall_name}...")
    
    # –ü–∞—Ä—Å–∏–º –º–∞–≥–∞–∑–∏–Ω—ã
    stores = parse_mall_stores(html_file)
    
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(stores)} –º–∞–≥–∞–∑–∏–Ω–æ–≤")
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —ç—Ç–∞–∂–∞–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    floors = {}
    for store_name, floor_num in stores.items():
        if floor_num not in floors:
            floors[floor_num] = []
        floors[floor_num].append(store_name)
    
    for floor_num in sorted(floors.keys()):
        print(f"{floor_num} —ç—Ç–∞–∂: {len(floors[floor_num])} –º–∞–≥–∞–∑–∏–Ω–æ–≤")
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    mall_data = format_mall_data(mall_name, stores, address, map_link, underground)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    save_results(mall_data, output_file)
    
    return mall_data

if __name__ == "__main__":
    main() 