"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π malls.json
"""

import json
import os
import sys

def integrate_mall_data(parsed_file, city="–ú–æ—Å–∫–≤–∞"):
    """
    –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π malls.json
    
    Args:
        parsed_file (str): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
        city (str): –ì–æ—Ä–æ–¥ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –¢–¶ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "–ú–æ—Å–∫–≤–∞")
    """
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not os.path.exists(parsed_file):
        print(f"‚ùå –§–∞–π–ª {parsed_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
    try:
        with open(parsed_file, 'r', encoding='utf-8') as f:
            parsed_data = json.load(f)
    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON —Ñ–∞–π–ª–∞ {parsed_file}: {e}")
        return False
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π malls.json
    malls_file = "../malls.json"
    if not os.path.exists(malls_file):
        print(f"‚ùå –§–∞–π–ª {malls_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    try:
        with open(malls_file, 'r', encoding='utf-8') as f:
            malls_data = json.load(f)
    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è malls.json: {e}")
        return False
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–æ–¥, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if city not in malls_data:
        malls_data[city] = {}
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≥–æ—Ä–æ–¥: {city}")
    
    # –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¢–¶
    mall_name = list(parsed_data.keys())[0]
    mall_data = parsed_data[mall_name]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –¢–¶
    if mall_name in malls_data[city]:
        print(f"‚ö†Ô∏è  –¢–¶ '{mall_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ malls.json")
        response = input("–ó–∞–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ? (y/N): ")
        if response.lower() != 'y':
            print("‚ùå –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return False
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¢–¶
    malls_data[city][mall_name] = mall_data
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π malls.json
    try:
        with open(malls_file, 'w', encoding='utf-8') as f:
            json.dump(malls_data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è malls.json: {e}")
        return False
    
    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stores_count = len(mall_data.get("stores", {}))
    print(f"‚úÖ –¢–¶ '{mall_name}' —É—Å–ø–µ—à–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω!")
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   - –ê–¥—Ä–µ—Å: {mall_data.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
    print(f"   - –ú–∞–≥–∞–∑–∏–Ω–æ–≤: {stores_count}")
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–∞–≥–∞–∑–∏–Ω—ã –ø–æ —ç—Ç–∞–∂–∞–º
    floors = {}
    for store_name, floor_num in mall_data.get("stores", {}).items():
        if floor_num not in floors:
            floors[floor_num] = []
        floors[floor_num].append(store_name)
    
    for floor_num in sorted(floors.keys()):
        print(f"   - {floor_num} —ç—Ç–∞–∂: {len(floors[floor_num])} –º–∞–≥–∞–∑–∏–Ω–æ–≤")
    
    return True

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    """
    
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python integrate_to_malls.py <—Ñ–∞–π–ª_—Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.json> [–≥–æ—Ä–æ–¥]")
        print("–ü—Ä–∏–º–µ—Ä: python integrate_to_malls.py paveletskaya_stores.json –ú–æ—Å–∫–≤–∞")
        return
    
    parsed_file = sys.argv[1]
    city = sys.argv[2] if len(sys.argv) > 2 else "–ú–æ—Å–∫–≤–∞"
    
    print(f"üîÑ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ {parsed_file} –≤ malls.json...")
    print(f"üèôÔ∏è  –ì–æ—Ä–æ–¥: {city}")
    
    success = integrate_mall_data(parsed_file, city)
    
    if success:
        print("üéâ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("üí• –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å!")
        sys.exit(1)

if __name__ == "__main__":
    main() 