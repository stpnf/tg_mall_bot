from fastapi import FastAPI, Request, Body, HTTPException
from fastapi.responses import JSONResponse
import json
import os
from datetime import datetime
from typing import Dict, Any
from rapidfuzz import process
import time
import redis.asyncio as redis
from logger import log_technical, log_user_activity
import logging
from migration_tools.user_id_map_crypto import add_mapping
from migration_tools.utils import get_user_uuid
from dotenv import load_dotenv

# –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ config.py)
BOT_ENV = os.getenv("BOT_ENV", "prod")
if BOT_ENV == "test":
    load_dotenv(".env.test")
else:
    load_dotenv(".env")

app = FastAPI()

USERS_FILE = os.getenv("USERS_FILE", "users.json")
MALLS_FILE = os.getenv("MALLS_FILE", "malls.json")
ALIASES_FILE = os.getenv("ALIASES_FILE", "aliases.json")
SAVED_QUERIES_FILE = os.getenv("SAVED_QUERIES_FILE", "saved_queries.json")
LOG_FILE = os.getenv("LOG_FILE", "logs/technical.json")
USER_ACTIVITY_LOG_FILE = os.getenv("USER_ACTIVITY_LOG_FILE", "logs/users_activity.json")
ERROR_LOG_FILE = os.getenv("ERROR_LOG_FILE", "logs/errors.json")

REDIS_URL = "redis://localhost:6379/0"
redis_client = redis.from_url(REDIS_URL)

# –ó–∞–≥—Ä—É–∂–∞–µ–º malls.json –∏ aliases.json –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
with open(MALLS_FILE, "r", encoding="utf-8") as f:
    MALLS_DATA = json.load(f)
with open(ALIASES_FILE, "r", encoding="utf-8") as f:
    STORE_ALIASES = json.load(f)

WELCOME_TEXT = """
<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MallFinder üõçÔ∏è</b>\n\n–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –Ω–∞–π—Ç–∏ —Ç–æ—Ä–≥–æ–≤—ã–µ —Ü–µ–Ω—Ç—Ä—ã, –≥–¥–µ –µ—Å—Ç—å –Ω—É–∂–Ω—ã–µ –≤–∞–º –º–∞–≥–∞–∑–∏–Ω—ã.\n\nüõí –ü—Ä–æ—Å—Ç–æ:\n1. –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥\n2. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–æ–≤\n3. –ü–æ–ª—É—á–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –¢–¶ —Å —ç—Ç–∏–º–∏ –º–∞–≥–∞–∑–∏–Ω–∞–º–∏ (—Å –∞–¥—Ä–µ—Å–∞–º–∏ –∏ —ç—Ç–∞–∂–∞–º–∏)\n\n<b>–†–∞–±–æ—Ç–∞—é—Ç —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –∏ —Å–∏–Ω–æ–Ω–∏–º—ã –Ω–∞–∑–≤–∞–Ω–∏–π!</b>\n\n–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –¢–¶ –∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç–∏ –∏–ª–∏ –±—ã—Ç—å –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ–π.\n"""

# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤
ALL_STORES = set()
for city_data in MALLS_DATA.values():
    for mall in city_data.values():
        ALL_STORES.update(mall["stores"])
ALL_STORES = list(ALL_STORES)

# States
STATE_CHOOSING_CITY = "choosing_city"
STATE_ENTERING_STORE = "entering_store"
STATE_ENTERING_QUERY_NAME = "entering_query_name"
STATE_RENAMING_QUERY_NAME = "renaming_query_name"
STATE_EDITING_SAVED_QUERY = "editing_saved_query"
STATE_EDITING_SAVED_QUERY_STORES_MENU = "editing_saved_query_stores_menu"

# –ú–µ–Ω—é (–≤ –≤–∏–¥–µ dict –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏)
def city_menu():
    return {
        "keyboard": [[{"text": "–ú–æ—Å–∫–≤–∞"}, {"text": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"}]],
        "resize_keyboard": True,
        "is_persistent": True
    }

def after_store_menu(editing_saved_query=False):
    keyboard = [
        [{"text": "üõçÔ∏è –î–æ–±–∞–≤–∏—Ç—å"}, {"text": "üîç –ò—Å–∫–∞—Ç—å"}],
        [{"text": "üßæ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"}, {"text": "üîÅ –°–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥"}],
        [{"text": "üÜï –ù–æ–≤—ã–π –ø–æ–∏—Å–∫"}]
    ]
    if not editing_saved_query:
        keyboard.append([{"text": "üìú –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤"}])
    if editing_saved_query:
        keyboard.append([{"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"}])
    return {
        "keyboard": keyboard,
        "resize_keyboard": True,
        "is_persistent": True
    }

def saved_query_edit_menu():
    return {
        "keyboard": [
            [{"text": "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–ø—Ä–æ—Å"}, {"text": "üóë –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫"}],
            [{"text": "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å"}, {"text": "‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å"}],
            [{"text": "üóë –£–¥–∞–ª–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω"}, {"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"}]
        ],
        "resize_keyboard": True,
        "is_persistent": True
    }

def query_menu():
    return {
        "keyboard": [
            [{"text": "üõí –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω—ã"}, {"text": "üîç –ò—Å–∫–∞—Ç—å"}],
            [{"text": "üóë –£–¥–∞–ª–∏—Ç—å"}, {"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"}],
            [{"text": "üÜï –ù–æ–≤—ã–π –ø–æ–∏—Å–∫"}]
        ],
        "resize_keyboard": True,
        "is_persistent": True,
        "one_time_keyboard": True  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    }

def reply(text, reply_markup=None, disable_web_page_preview=None):
    resp = {"text": text, "reply_markup": reply_markup}
    if disable_web_page_preview is not None:
        resp["disable_web_page_preview"] = disable_web_page_preview
    return resp

# --- Redis logging setup ---
logging.basicConfig(
    level=logging.INFO,
    filename='my_redis.log',
    format='%(asctime)s %(levelname)s %(name)s %(message)s'
)
logging.getLogger("redis").setLevel(logging.DEBUG)
redis_logger = logging.getLogger("myapp.redis")

# FSM helpers
async def get_state(user_id):
    state = await redis_client.get(f"user_fsm:{str(user_id)}")
    redis_logger.info(f"GET user_fsm:{str(user_id)} -> {state}")
    if state:
        return state.decode()
    return STATE_CHOOSING_CITY

async def set_state(user_id, state):
    await redis_client.set(f"user_fsm:{str(user_id)}", state)
    redis_logger.info(f"SET user_fsm:{str(user_id)} = {state}")

async def get_user_data(user_id):
    key = f"user_data:{str(user_id)}"
    data = await redis_client.get(key)
    redis_logger.info(f"GET {key} -> {data}")
    if data:
        return json.loads(data.decode('utf-8'))
    return {"city": None, "stores": []}

async def set_user_data(user_id, data):
    key = f"user_data:{str(user_id)}"
    await redis_client.set(key, json.dumps(data, ensure_ascii=False))
    redis_logger.info(f"SET {key} = {data}")

# –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
# –í–ù–ò–ú–ê–ù–ò–ï: user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å UUID (–∞ –Ω–µ Telegram ID)!
def load_saved_queries(user_id):
    if os.path.exists(SAVED_QUERIES_FILE):
        with open(SAVED_QUERIES_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
    else:
        data = {}
    return data.get(str(user_id), [])

# –í–ù–ò–ú–ê–ù–ò–ï: user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å UUID (–∞ –Ω–µ Telegram ID)!
def save_saved_queries(user_id, queries):
    if os.path.exists(SAVED_QUERIES_FILE):
        with open(SAVED_QUERIES_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
    else:
        data = {}
    data[str(user_id)] = queries
    with open(SAVED_QUERIES_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def correct_store_name(user_input, all_known_stores, aliases_threshold=70, stores_threshold=80):
    if not user_input or not all_known_stores or process is None:
        return None
    input_lower = user_input.strip().lower()
    for store in all_known_stores:
        if store.lower() == input_lower:
            return store
    for official_name, aliases in STORE_ALIASES.items():
        if input_lower in [a.lower() for a in aliases]:
            return official_name
    startswith_matches = [s for s in all_known_stores if s.lower().startswith(input_lower)]
    if startswith_matches:
        return min(startswith_matches, key=len)
    substring_matches = [s for s in all_known_stores if input_lower in s.lower()]
    if substring_matches:
        return min(substring_matches, key=len)
    for official_name, aliases in STORE_ALIASES.items():
        match = process.extractOne(
            input_lower,
            aliases,
            processor=str.lower,
            score_cutoff=aliases_threshold,
        ) if process else None
        if match:
            return official_name
    match = process.extractOne(
        user_input,
        all_known_stores,
        processor=str.lower,
        score_cutoff=stores_threshold,
    ) if process else None
    return match[0] if match else None

def log_event(user_id, event, data=None):
    entry = {
        "timestamp": datetime.now().isoformat(),
        "user_id": user_id,
        "event": event,
        "data": data or {}
    }
    with open(LOG_FILE, "a", encoding="utf-8") as f:
        f.write(json.dumps(entry, ensure_ascii=False) + "\n")

API_TOKEN = os.getenv("API_TOKEN")

def check_token(request: Request):
    auth = request.headers.get("Authorization")
    if auth != f"Bearer {API_TOKEN}":
        raise HTTPException(status_code=401, detail="Unauthorized")

async def handle_start_command(user_id: str, start_time: float):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    add_mapping(user_id)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫—Ä–∏–ø—Ç–æ-–º–∞–ø–ø–∏–Ω–≥
    await set_state(user_id, STATE_CHOOSING_CITY)
    await set_user_data(user_id, {"city": None, "stores": []})
    response = reply(WELCOME_TEXT, city_menu(), disable_web_page_preview=True)
    duration = time.time() - start_time
    log_technical(get_user_uuid(user_id), "bot_response", details={"text": WELCOME_TEXT, "duration": duration})
    log_technical(get_user_uuid(user_id), "http_response", details={"status_code": 200, "status": "OK", "duration": duration})
    return JSONResponse(response)

async def handle_city_selection(user_id: str, text: str, start_time: float):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞"""
    if text not in MALLS_DATA:
        response = reply("–ü–æ–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –ú–æ—Å–∫–≤–∞ –∏ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", city_menu(), disable_web_page_preview=True)
        duration = time.time() - start_time
        log_technical(get_user_uuid(user_id), "bot_response", details={"text": "–ü–æ–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –ú–æ—Å–∫–≤–∞ –∏ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "duration": duration})
        log_technical(get_user_uuid(user_id), "http_response", details={"status_code": 200, "status": "OK", "duration": duration})
        return JSONResponse(response)
    
    await set_user_data(user_id, {"city": text, "stores": [], "current_query_index": None})
    await set_state(user_id, STATE_ENTERING_STORE)
    log_user_activity(get_user_uuid(user_id), "city_selected", {"city": text})
    response_text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥–æ—Ä–æ–¥: <b>{text}</b>.\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\nüõçÔ∏è –î–æ–±–∞–≤–∏—Ç—å ‚Äî –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞\nüîç –ò—Å–∫–∞—Ç—å ‚Äî –Ω–∞–π—Ç–∏ –¢–¶ —Å –Ω—É–∂–Ω—ã–º–∏ –º–∞–≥–∞–∑–∏–Ω–∞–º–∏\nüßæ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω—ã\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ –≤–≤–æ–¥"
    response = reply(response_text, after_store_menu(), disable_web_page_preview=True)
    duration = time.time() - start_time
    log_technical(get_user_uuid(user_id), "bot_response", details={"text": response_text, "duration": duration})
    log_technical(get_user_uuid(user_id), "http_response", details={"status_code": 200, "status": "OK", "duration": duration})
    return JSONResponse(response)

async def handle_store_editing(user_id: str, start_time: float):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤"""
    log_user_activity(get_user_uuid(user_id), "menu_action", {"action": "edit_stores_list"})
    user_data = await get_user_data(user_id)
    # –°–±—Ä–æ—Å current_query_index, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –≤—ã—Å—Ç–∞–≤–ª–µ–Ω
    if user_data.get("current_query_index") is not None:
        user_data["current_query_index"] = None
        await set_user_data(user_id, user_data)
    stores = user_data["stores"]
    if not stores:
        response = reply("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç (–∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –∑–∞–ø—Ä–æ—Å–µ)", after_store_menu(), disable_web_page_preview=True)
        duration = time.time() - start_time
        log_technical(get_user_uuid(user_id), "bot_response", details={"text": "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç (–∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –∑–∞–ø—Ä–æ—Å–µ)", "duration": duration})
        log_technical(get_user_uuid(user_id), "http_response", details={"status_code": 200, "status": "OK", "duration": duration})
        return JSONResponse(response)
    response_text = "<b>–í–∞—à —Å–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤ (–∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –∑–∞–ø—Ä–æ—Å–µ):</b>\n"
    for i, store in enumerate(stores, 1):
        response_text += f"{i}. {store}\n"
    response_text += "\n–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω ‚Äî –æ—Ç–ø—Ä–∞–≤—å –µ–≥–æ –Ω–æ–º–µ—Ä"
    response = reply(response_text, after_store_menu(), disable_web_page_preview=True)
    duration = time.time() - start_time
    log_technical(get_user_uuid(user_id), "bot_response", details={"text": response_text, "duration": duration})
    log_technical(get_user_uuid(user_id), "http_response", details={"status_code": 200, "status": "OK", "duration": duration})
    return JSONResponse(response)

async def handle_city_change(user_id: str, start_time: float):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã –≥–æ—Ä–æ–¥–∞"""
    log_user_activity(get_user_uuid(user_id), "menu_action", {"action": "change_city"})
    await set_state(user_id, STATE_CHOOSING_CITY)
    await set_user_data(user_id, {"city": None, "stores": [], "current_query_index": None})
    response = reply("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", city_menu(), disable_web_page_preview=True)
    duration = time.time() - start_time
    log_technical(get_user_uuid(user_id), "bot_response", details={"text": "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", "duration": duration})
    log_technical(get_user_uuid(user_id), "http_response", details={"status_code": 200, "status": "OK", "duration": duration})
    return JSONResponse(response)

async def handle_mall_search(user_id: str, start_time: float):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ü–µ–Ω—Ç—Ä–æ–≤"""
    log_user_activity(get_user_uuid(user_id), "menu_action", {"action": "search_malls"})
    user_data = await get_user_data(user_id)
    city = user_data.get("city")
    queries = user_data.get("stores", [])
    
    if not city:
        response = reply("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ —á–µ—Ä–µ–∑ /start", after_store_menu(), disable_web_page_preview=True)
        duration = time.time() - start_time
        log_technical(get_user_uuid(user_id), "bot_response", details={"text": "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ —á–µ—Ä–µ–∑ /start", "duration": duration})
        log_technical(get_user_uuid(user_id), "http_response", details={"status_code": 200, "status": "OK", "duration": duration})
        return JSONResponse(response)
    
    if not queries:
        response = reply("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –º–∞–≥–∞–∑–∏–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞", after_store_menu(), disable_web_page_preview=True)
        duration = time.time() - start_time
        log_technical(get_user_uuid(user_id), "bot_response", details={"text": "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –º–∞–≥–∞–∑–∏–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞", "duration": duration})
        log_technical(get_user_uuid(user_id), "http_response", details={"status_code": 200, "status": "OK", "duration": duration})
        return JSONResponse(response)
    
    log_user_activity(get_user_uuid(user_id), "store_search", {"city": city, "stores": queries})
    results = []
    for mall_name, mall_data in MALLS_DATA[city].items():
        mall_stores_dict = mall_data.get("stores", {})
        if isinstance(mall_stores_dict, list):
            mall_stores_dict = {store: None for store in mall_stores_dict}
        mall_stores_lower = {
            store.lower(): (store, floor)
            for store, floor in mall_stores_dict.items()
        }
        matched_stores = []
        found_store_queries = set()
        for store_query in queries:
            corrected_query = correct_store_name(store_query, ALL_STORES) or store_query
            for store_lower, (original_store, floor) in mall_stores_lower.items():
                if corrected_query.lower() == store_lower:
                    matched_stores.append((original_store, floor))
                    found_store_queries.add(store_query.lower())
                    break
        if matched_stores:
            results.append((mall_name, mall_data["address"], matched_stores, mall_data, len(found_store_queries)))
    
    if not results:
        log_user_activity(get_user_uuid(user_id), "search_result", {"result": "no_matches", "city": city, "stores": queries})
        response = reply("–ú–∞–≥–∞–∑–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã üòî", after_store_menu(), disable_web_page_preview=True)
        duration = time.time() - start_time
        log_technical(get_user_uuid(user_id), "bot_response", details={"text": "–ú–∞–≥–∞–∑–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã üòî", "duration": duration})
        log_technical(get_user_uuid(user_id), "http_response", details={"status_code": 200, "status": "OK", "duration": duration})
        return JSONResponse(response)
    
    results.sort(key=lambda x: x[4], reverse=True)
    total_user_selected = len(queries)
    full_response = ""
    for mall, address, matched_stores, mall_data, matched_count in results:
        yandex_link = mall_data.get("map_link") or f"https://yandex.ru/maps/?text={address.replace(' ', '+')}"
        matched_stores = [tuple(item) for item in matched_stores]
        matched_stores = list({(name, floor) for name, floor in matched_stores})
        matched_stores.sort(key=lambda x: (x[1] is None, x[1]))
        text_result = f"üè¨ <b>{mall}</b> ‚Äî {matched_count} / {total_user_selected} –º–∞–≥–∞–∑–∏–Ω–æ–≤\n"
        text_result += f"<a href='{yandex_link}'>{address}</a>\n\n"
        for name, floor in matched_stores:
            if floor is None:
                floor_info = " ‚Äî –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
            else:
                floor_info = f" ‚Äî {floor} —ç—Ç–∞–∂"
            text_result += f"‚Ä¢ {name}{floor_info}\n"
        full_response += text_result + "\n"
    
    log_user_activity(get_user_uuid(user_id), "search_result", {"result": "found", "city": city, "stores": queries, "malls_found": len(results)})
    response = reply(full_response.strip(), after_store_menu(), disable_web_page_preview=True)
    duration = time.time() - start_time
    log_technical(get_user_uuid(user_id), "bot_response", details={"text": full_response.strip(), "duration": duration})
    log_technical(get_user_uuid(user_id), "http_response", details={"status_code": 200, "status": "OK", "duration": duration})
    return JSONResponse(response)

async def handle_clear_stores_list(user_id: str, start_time: float):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–ø–∏—Å–∫–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤"""
    log_user_activity(get_user_uuid(user_id), "menu_action", {"action": "clear_stores_list"})
    user_data = await get_user_data(user_id)
    user_data["stores"] = []
    user_data["current_query_index"] = None # —Å–±—Ä–æ—Å –∏–Ω–¥–µ–∫—Å–∞
    await set_user_data(user_id, user_data)
    log_user_activity(get_user_uuid(user_id), "query_stores_updated", {"stores": []})
    response = reply("–°–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –æ—á–∏—â–µ–Ω", after_store_menu(), disable_web_page_preview=True)
    duration = time.time() - start_time
    log_technical(get_user_uuid(user_id), "bot_response", details={"text": "–°–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –æ—á–∏—â–µ–Ω", "duration": duration})
    log_technical(get_user_uuid(user_id), "http_response", details={"status_code": 200, "status": "OK", "duration": duration})
    return JSONResponse(response)

async def handle_show_saved_queries(user_id: str, start_time: float):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    log_user_activity(get_user_uuid(user_id), "menu_action", {"action": "show_saved_queries"})
    queries = load_saved_queries(get_user_uuid(user_id))
    user_data = await get_user_data(user_id)
    user_data["current_query_index"] = None # —Å–±—Ä–æ—Å –∏–Ω–¥–µ–∫—Å–∞
    await set_user_data(user_id, user_data)
    if not queries:
        log_user_activity(get_user_uuid(user_id), "saved_queries_action", {"action": "view", "result": "empty"})
        response = reply("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤", after_store_menu(), disable_web_page_preview=True)
        duration = time.time() - start_time
        log_technical(get_user_uuid(user_id), "bot_response", details={"text": "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤", "duration": duration})
        log_technical(get_user_uuid(user_id), "http_response", details={"status_code": 200, "status": "OK", "duration": duration})
        return JSONResponse(response)
    
    log_user_activity(get_user_uuid(user_id), "saved_queries_action", {"action": "view", "result": "found", "count": len(queries)})
    lines = []
    buttons = []
    for i, q in enumerate(queries):
        stores_str = ", ".join(q["stores"])
        lines.append(f"{i + 1}. <b>{q['name']}</b>\n{stores_str}")
        buttons.append([{"text": q["name"], "callback_data": f"load_query::{i}"}])
    text_out = "\n\n".join(lines)
    keyboard = {"inline_keyboard": buttons}
    response = reply(text_out + "\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏:", keyboard, disable_web_page_preview=True)
    duration = time.time() - start_time
    log_technical(get_user_uuid(user_id), "bot_response", details={"text": text_out + "\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏:", "duration": duration})
    log_technical(get_user_uuid(user_id), "http_response", details={"status_code": 200, "status": "OK", "duration": duration})
    return JSONResponse(response)

async def handle_add_store_prompt(user_id: str, start_time: float):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞"""
    log_user_activity(get_user_uuid(user_id), "menu_action", {"action": "add_store_prompt"})
    response = reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞:", after_store_menu(), disable_web_page_preview=True)
    duration = time.time() - start_time
    log_technical(get_user_uuid(user_id), "bot_response", details={"text": "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞:", "duration": duration})
    log_technical(get_user_uuid(user_id), "http_response", details={"status_code": 200, "status": "OK", "duration": duration})
    return JSONResponse(response)

async def handle_new_search(user_id: str, start_time: float):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
    log_user_activity(get_user_uuid(user_id), "menu_action", {"action": "new_search"})
    user_data = await get_user_data(user_id)
    user_data["stores"] = []
    user_data["current_query_index"] = None # —Å–±—Ä–æ—Å –∏–Ω–¥–µ–∫—Å–∞
    await set_user_data(user_id, user_data)
    log_user_activity(get_user_uuid(user_id), "query_stores_updated", {"stores": []})
    response = reply(
        "‚úÖ –ù–∞—á–∞—Ç –Ω–æ–≤—ã–π –ø—É—Å—Ç–æ–π –ø–æ–∏—Å–∫.\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\nüõçÔ∏è –î–æ–±–∞–≤–∏—Ç—å ‚Äî –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞\nüîç –ò—Å–∫–∞—Ç—å ‚Äî –Ω–∞–π—Ç–∏ –¢–¶ —Å –Ω—É–∂–Ω—ã–º–∏ –º–∞–≥–∞–∑–∏–Ω–∞–º–∏\nüßæ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω—ã\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ –≤–≤–æ–¥",
        after_store_menu(),
        disable_web_page_preview=True
    )
    duration = time.time() - start_time
    log_technical(get_user_uuid(user_id), "bot_response", details={"text": "‚úÖ –ù–∞—á–∞—Ç –Ω–æ–≤—ã–π –ø—É—Å—Ç–æ–π –ø–æ–∏—Å–∫. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ: ...", "duration": duration})
    log_technical(get_user_uuid(user_id), "http_response", details={"status_code": 200, "status": "OK", "duration": duration})
    return JSONResponse(response)

async def handle_store_number_input(user_id: str, text: str, start_time: float):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞"""
    user_data = await get_user_data(user_id)
    stores = user_data["stores"]
    index = int(text) - 1
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
    if 0 <= index < len(stores):
        removed = stores.pop(index)
        user_data["stores"] = stores
        await set_user_data(user_id, user_data)
        log_user_activity(get_user_uuid(user_id), "store_removed", {"store": removed, "method": "by_number", "remaining_count": len(stores)})
        response = reply(f"–ú–∞–≥–∞–∑–∏–Ω <b>{removed}</b> —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞", after_store_menu(), disable_web_page_preview=True)
        duration = time.time() - start_time
        log_technical(get_user_uuid(user_id), "bot_response", details={"text": f"–ú–∞–≥–∞–∑–∏–Ω <b>{removed}</b> —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞", "duration": duration})
        log_technical(get_user_uuid(user_id), "http_response", details={"status_code": 200, "status": "OK", "duration": duration})
        return JSONResponse(response)
    
    # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    queries = load_saved_queries(get_user_uuid(user_id))
    if 0 <= index < len(queries):
        log_user_activity(get_user_uuid(user_id), "saved_queries_action", {"action": "load_by_number", "query_index": index, "query_name": queries[index]["name"]})
        user_data = await get_user_data(user_id)
        user_data["stores"] = list(queries[index]["stores"])
        user_data["current_query_index"] = index
        await set_user_data(user_id, user_data)
        await set_state(user_id, STATE_EDITING_SAVED_QUERY)
        response_text = f"–ó–∞–≥—Ä—É–∂–µ–Ω —Å–ø–∏—Å–æ–∫ <b>{queries[index]['name']}</b>:\n\n"
        for i, store in enumerate(queries[index]["stores"], 1):
            response_text += f"{i}. {store}\n"
        response = reply(response_text, query_menu(), disable_web_page_preview=True)
        duration = time.time() - start_time
        log_technical(get_user_uuid(user_id), "bot_response", details={"text": response_text, "duration": duration})
        log_technical(get_user_uuid(user_id), "http_response", details={"status_code": 200, "status": "OK", "duration": duration})
        return JSONResponse(response)
    
    # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –Ω–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è, –Ω–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
    log_user_activity(get_user_uuid(user_id), "input_error", {"error": "invalid_store_number", "input": text, "max_valid": len(stores)})
    response = reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä", after_store_menu(), disable_web_page_preview=True)
    duration = time.time() - start_time
    log_technical(get_user_uuid(user_id), "bot_response", details={"text": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä", "duration": duration})
    log_technical(get_user_uuid(user_id), "http_response", details={"status_code": 200, "status": "OK", "duration": duration})
    return JSONResponse(response)

async def handle_store_name_input(user_id: str, text: str, start_time: float):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞"""
    user_data = await get_user_data(user_id)
    state = await get_state(user_id)
    current_query_index = user_data.get("current_query_index")
    # –ù–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º current_query_index, –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    if state == STATE_ENTERING_STORE and current_query_index is not None:
        # –û—Å—Ç–∞–≤–ª—è–µ–º current_query_index, —á—Ç–æ–±—ã –º–µ–Ω—é –Ω–µ –º–µ–Ω—è–ª–æ—Å—å
        pass
    corrected = correct_store_name(text, ALL_STORES)
    if not corrected:
        log_user_activity(get_user_uuid(user_id), "store_not_found", {"input": text, "suggestions": []})
        menu = saved_query_edit_menu() if current_query_index is not None else after_store_menu()
        response = reply(f"‚ùå –ú–∞–≥–∞–∑–∏–Ω <b>{text}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", menu, disable_web_page_preview=True)
        duration = time.time() - start_time
        log_technical(get_user_uuid(user_id), "bot_response", details={"text": f"‚ùå –ú–∞–≥–∞–∑–∏–Ω <b>{text}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", "duration": duration})
        log_technical(get_user_uuid(user_id), "http_response", details={"status_code": 200, "status": "OK", "duration": duration})
        return JSONResponse(response)
    user_data = await get_user_data(user_id)
    if corrected.lower() in [s.lower() for s in user_data["stores"]]:
        log_user_activity(get_user_uuid(user_id), "store_already_exists", {"store": corrected, "input": text})
        menu = saved_query_edit_menu() if current_query_index is not None else after_store_menu()
        response = reply(f"üîÅ –ú–∞–≥–∞–∑–∏–Ω <b>{corrected}</b> —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ", menu, disable_web_page_preview=True)
        duration = time.time() - start_time
        log_technical(get_user_uuid(user_id), "bot_response", details={"text": f"üîÅ –ú–∞–≥–∞–∑–∏–Ω <b>{corrected}</b> —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ", "duration": duration})
        log_technical(get_user_uuid(user_id), "http_response", details={"status_code": 200, "status": "OK", "duration": duration})
        return JSONResponse(response)
    user_data["stores"] = user_data["stores"] + [corrected]
    await set_user_data(user_id, user_data)
    # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
    if current_query_index is not None:
        queries = load_saved_queries(get_user_uuid(user_id))
        if 0 <= current_query_index < len(queries):
            queries[current_query_index]["stores"] = list(user_data["stores"])
            save_saved_queries(get_user_uuid(user_id), queries)
    log_user_activity(get_user_uuid(user_id), "store_added", {"store": corrected, "input": text, "was_corrected": text != corrected})
    response_text = f"<b>–ú–∞–≥–∞–∑–∏–Ω –¥–æ–±–∞–≤–ª–µ–Ω:</b> {corrected}\n\n"
    response_text += "<b>–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫:</b>\n"
    user_data = await get_user_data(user_id)
    for i, store in enumerate(user_data["stores"], 1):
        response_text += f"{i}. {store}\n"
    if current_query_index is not None:
        menu = saved_query_edit_menu()
        await set_state(user_id, STATE_EDITING_SAVED_QUERY_STORES_MENU)
        log_technical(get_user_uuid(user_id), "menu_selection", details={"menu": "saved_query_edit_menu", "current_query_index": current_query_index})
        response = reply(response_text, menu, disable_web_page_preview=True)
    else:
        # –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏: "–≠—Ç–æ –Ω–µ —Ç–æ—Ç –º–∞–≥–∞–∑–∏–Ω" –∏ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å"
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥ –≤ user_data['store_choices']
        user_data = await get_user_data(user_id)
        store_choices = user_data.get("store_choices", [])
        store_choices.append(text)
        user_data["store_choices"] = store_choices
        await set_user_data(user_id, user_data)
        user_input_index = len(store_choices) - 1
        corrected_index = user_input_index  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ —á—Ç–æ –¥–æ–±–∞–≤–∏–ª–∏
        log_technical(get_user_uuid(user_id), "debug", details={"message": f"Added store '{corrected}', original input '{text}', store_choices: {store_choices}"})
        keyboard = {"inline_keyboard": [
            [{"text": "‚ùå –≠—Ç–æ –Ω–µ —Ç–æ—Ç –º–∞–≥–∞–∑–∏–Ω", "callback_data": f"wrong_store::0::{corrected_index}"}],
            [{"text": "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å", "callback_data": "save_query"}]
        ]}
        menu = after_store_menu()
        log_technical(get_user_uuid(user_id), "menu_selection", details={"menu": "after_store_menu", "current_query_index": None})
        response = reply(response_text, keyboard, disable_web_page_preview=True)
    duration = time.time() - start_time
    log_technical(get_user_uuid(user_id), "bot_response", details={"text": response_text, "duration": duration})
    log_technical(get_user_uuid(user_id), "http_response", details={"status_code": 200, "status": "OK", "duration": duration})
    return JSONResponse(response)

async def handle_saved_query_actions(user_id: str, text: str, start_time: float):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏"""
    # –î–æ–±–∞–≤–ª–µ–Ω–æ: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ 'üìú –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤' –∏–∑ –ª—é–±–æ–≥–æ —Ä–µ–∂–∏–º–∞
    if text == "üìú –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤":
        return await handle_show_saved_queries(user_id, start_time)
    user_data = await get_user_data(user_id)
    idx = user_data.get("current_query_index")
    queries = load_saved_queries(get_user_uuid(user_id))
    
    if text == "‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å":
        log_user_activity(get_user_uuid(user_id), "saved_query_action", {"action": "rename_prompt", "query_index": idx})
        await set_state(user_id, STATE_RENAMING_QUERY_NAME)
        response = reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:", query_menu(), disable_web_page_preview=True)
        duration = time.time() - start_time
        log_technical(get_user_uuid(user_id), "bot_response", details={"text": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:", "duration": duration})
        log_technical(get_user_uuid(user_id), "http_response", details={"status_code": 200, "status": "OK", "duration": duration})
        return JSONResponse(response)
    
    if text == "üõí –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω—ã":
        log_user_activity(get_user_uuid(user_id), "saved_query_action", {"action": "edit_stores", "query_index": idx})
        if idx is not None and 0 <= idx < len(queries):
            user_data["stores"] = list(queries[idx]["stores"])
            user_data["current_query_index"] = idx
            await set_user_data(user_id, user_data)
        user_data = await get_user_data(user_id)
        stores = user_data["stores"]
        await set_state(user_id, STATE_ENTERING_STORE)
        response = reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", saved_query_edit_menu(), disable_web_page_preview=True)
        duration = time.time() - start_time
        log_technical(get_user_uuid(user_id), "bot_response", details={"text": "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", "duration": duration})
        log_technical(get_user_uuid(user_id), "http_response", details={"status_code": 200, "status": "OK", "duration": duration})
        return JSONResponse(response)
    
    if text == "üÜï –ù–æ–≤—ã–π –ø–æ–∏—Å–∫":
        log_user_activity(get_user_uuid(user_id), "saved_query_action", {"action": "new_search_from_saved", "query_index": idx})
        user_data = await get_user_data(user_id)
        user_data["stores"] = []
        user_data["current_query_index"] = None # —Å–±—Ä–æ—Å –∏–Ω–¥–µ–∫—Å–∞
        await set_user_data(user_id, user_data)
        await set_state(user_id, STATE_ENTERING_STORE)
        response = reply(
            "‚úÖ –ù–∞—á–∞—Ç –Ω–æ–≤—ã–π –ø—É—Å—Ç–æ–π –ø–æ–∏—Å–∫.\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\nüõçÔ∏è –î–æ–±–∞–≤–∏—Ç—å ‚Äî –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞\nüîç –ò—Å–∫–∞—Ç—å ‚Äî –Ω–∞–π—Ç–∏ –¢–¶ —Å –Ω—É–∂–Ω—ã–º–∏ –º–∞–≥–∞–∑–∏–Ω–∞–º–∏\nüßæ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω—ã\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ –≤–≤–æ–¥",
            after_store_menu(),
            disable_web_page_preview=True
        )
        duration = time.time() - start_time
        log_technical(get_user_uuid(user_id), "bot_response", details={"text": "‚úÖ –ù–∞—á–∞—Ç –Ω–æ–≤—ã–π –ø—É—Å—Ç–æ–π –ø–æ–∏—Å–∫. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ: ...", "duration": duration})
        log_technical(get_user_uuid(user_id), "http_response", details={"status_code": 200, "status": "OK", "duration": duration})
        return JSONResponse(response)
    
    if text == "üîç –ò—Å–∫–∞—Ç—å":
        log_user_activity(get_user_uuid(user_id), "saved_query_action", {"action": "search_from_saved", "query_index": idx})
        await set_state(user_id, STATE_ENTERING_STORE)
        return await handle_mall_search(user_id, start_time)
    
    if text == "üóë –£–¥–∞–ª–∏—Ç—å":
        log_user_activity(get_user_uuid(user_id), "saved_query_action", {"action": "delete", "query_index": idx})
        if idx is not None and 0 <= idx < len(queries):
            queries.pop(idx)
            save_saved_queries(get_user_uuid(user_id), queries)
            log_user_activity(get_user_uuid(user_id), "query_deleted", {"query_index": idx})
            await set_state(user_id, STATE_ENTERING_STORE)
            user_data = await get_user_data(user_id)
            user_data["current_query_index"] = None  # —Å–±—Ä–æ—Å –∏–Ω–¥–µ–∫—Å–∞
            await set_user_data(user_id, user_data)
            response = reply("–ó–∞–ø—Ä–æ—Å —É–¥–∞–ª—ë–Ω.", after_store_menu(), disable_web_page_preview=True)
            duration = time.time() - start_time
            log_technical(get_user_uuid(user_id), "bot_response", details={"text": "–ó–∞–ø—Ä–æ—Å —É–¥–∞–ª—ë–Ω.", "duration": duration})
            log_technical(get_user_uuid(user_id), "http_response", details={"status_code": 200, "status": "OK", "duration": duration})
            return JSONResponse(response)
        else:
            log_user_activity(get_user_uuid(user_id), "error", {"error": "query_not_found", "query_index": idx})
            user_data = await get_user_data(user_id)
            user_data["current_query_index"] = None  # —Å–±—Ä–æ—Å –∏–Ω–¥–µ–∫—Å–∞
            await set_user_data(user_id, user_data)
            response = reply("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–ø—Ä–æ—Å. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –±—ã–ª —É–¥–∞–ª—ë–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", after_store_menu(), disable_web_page_preview=True)
            duration = time.time() - start_time
            log_technical(get_user_uuid(user_id), "bot_response", details={"text": "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–ø—Ä–æ—Å. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –±—ã–ª —É–¥–∞–ª—ë–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", "duration": duration})
            log_technical(get_user_uuid(user_id), "http_response", details={"status_code": 200, "status": "OK", "duration": duration})
            return JSONResponse(response)
    
    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        log_user_activity(get_user_uuid(user_id), "navigation", {"action": "back_to_main_menu"})
        await set_state(user_id, STATE_ENTERING_STORE)
        user_data = await get_user_data(user_id)
        user_data["current_query_index"] = None  # —Å–±—Ä–æ—Å –∏–Ω–¥–µ–∫—Å–∞
        await set_user_data(user_id, user_data)
        response = reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", after_store_menu(), disable_web_page_preview=True)
        duration = time.time() - start_time
        log_technical(get_user_uuid(user_id), "bot_response", details={"text": "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", "duration": duration})
        log_technical(get_user_uuid(user_id), "http_response", details={"status_code": 200, "status": "OK", "duration": duration})
        return JSONResponse(response)
    
    log_user_activity(get_user_uuid(user_id), "input_error", {"error": "unknown_command_in_saved_query", "input": text})
    response = reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", query_menu(), disable_web_page_preview=True)
    duration = time.time() - start_time
    log_technical(get_user_uuid(user_id), "bot_response", details={"text": "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", "duration": duration})
    log_technical(get_user_uuid(user_id), "http_response", details={"status_code": 200, "status": "OK", "duration": duration})
    return JSONResponse(response)

async def handle_query_renaming(user_id: str, text: str, start_time: float):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞"""
    user_data = await get_user_data(user_id)
    idx = user_data.get("current_query_index")
    queries = load_saved_queries(get_user_uuid(user_id))
    new_name = text
    
    if idx is None or not (0 <= idx < len(queries)):
        log_user_activity(get_user_uuid(user_id), "error", {"error": "query_not_found_for_rename", "query_index": idx})
        await set_state(user_id, STATE_ENTERING_STORE)
        response = reply("üîé –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª—ë–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π.", after_store_menu(), disable_web_page_preview=True)
        duration = time.time() - start_time
        log_technical(get_user_uuid(user_id), "bot_response", details={"text": "üîé –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª—ë–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π.", "duration": duration})
        log_technical(get_user_uuid(user_id), "http_response", details={"status_code": 200, "status": "OK", "duration": duration})
        return JSONResponse(response)
    
    queries[idx]["name"] = new_name
    save_saved_queries(get_user_uuid(user_id), queries)
    log_user_activity(get_user_uuid(user_id), "query_renamed", {"query_index": idx, "new_name": new_name})
    await set_state(user_id, STATE_EDITING_SAVED_QUERY_STORES_MENU)
    response = reply("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ", saved_query_edit_menu(), disable_web_page_preview=True)
    duration = time.time() - start_time
    log_technical(get_user_uuid(user_id), "bot_response", details={"text": "‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ", "duration": duration})
    log_technical(get_user_uuid(user_id), "http_response", details={"status_code": 200, "status": "OK", "duration": duration})
    return JSONResponse(response)

async def handle_saved_query_stores_editing(user_id: str, text: str, start_time: float):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–æ–≤ –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ"""
    user_data = await get_user_data(user_id)
    idx = user_data.get("current_query_index")
    queries = load_saved_queries(get_user_uuid(user_id))
    
    if idx is None or not (0 <= idx < len(queries)):
        log_user_activity(get_user_uuid(user_id), "error", {"error": "query_not_found_for_edit", "query_index": idx})
        await set_state(user_id, STATE_EDITING_SAVED_QUERY)
        response = reply("üîé –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª—ë–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π.", query_menu(), disable_web_page_preview=True)
        duration = time.time() - start_time
        log_technical(get_user_uuid(user_id), "bot_response", details={"text": " –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª—ë–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π.", "duration": duration})
        log_technical(get_user_uuid(user_id), "http_response", details={"status_code": 200, "status": "OK", "duration": duration})
        return JSONResponse(response)
    
    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        log_user_activity(get_user_uuid(user_id), "navigation", {"action": "back_to_saved_query_menu"})
        await set_state(user_id, STATE_EDITING_SAVED_QUERY)
        response = reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", query_menu(), disable_web_page_preview=True)
        duration = time.time() - start_time
        log_technical(get_user_uuid(user_id), "bot_response", details={"text": "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", "duration": duration})
        log_technical(get_user_uuid(user_id), "http_response", details={"status_code": 200, "status": "OK", "duration": duration})
        return JSONResponse(response)
    
    if text == "üóë –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫":
        log_user_activity(get_user_uuid(user_id), "saved_query_action", {"action": "clear_stores", "query_index": idx})
        user_data = await get_user_data(user_id)
        user_data["stores"] = []
        await set_user_data(user_id, user_data)
        queries[idx]["stores"] = []
        save_saved_queries(get_user_uuid(user_id), queries)
        log_user_activity(get_user_uuid(user_id), "query_stores_updated", {"stores": []})
        response = reply("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã", saved_query_edit_menu(), disable_web_page_preview=True)
        duration = time.time() - start_time
        log_technical(get_user_uuid(user_id), "bot_response", details={"text": "‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã", "duration": duration})
        log_technical(get_user_uuid(user_id), "http_response", details={"status_code": 200, "status": "OK", "duration": duration})
        return JSONResponse(response)
    
    if text == "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å":
        log_user_activity(get_user_uuid(user_id), "saved_query_action", {"action": "save_changes", "query_index": idx})
        user_data = await get_user_data(user_id)
        queries[idx]["stores"] = list(user_data["stores"])
        save_saved_queries(get_user_uuid(user_id), queries)
        log_user_activity(get_user_uuid(user_id), "query_saved", {"query_index": idx, "stores": user_data["stores"]})
        response = reply("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã", saved_query_edit_menu(), disable_web_page_preview=True)
        duration = time.time() - start_time
        log_technical(get_user_uuid(user_id), "bot_response", details={"text": "‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã", "duration": duration})
        log_technical(get_user_uuid(user_id), "http_response", details={"status_code": 200, "status": "OK", "duration": duration})
        return JSONResponse(response)
    
    if text == "‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å":
        log_user_activity(get_user_uuid(user_id), "saved_query_action", {"action": "rename_prompt_from_edit", "query_index": idx})
        await set_state(user_id, STATE_RENAMING_QUERY_NAME)
        response = reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:", saved_query_edit_menu(), disable_web_page_preview=True)
        duration = time.time() - start_time
        log_technical(get_user_uuid(user_id), "bot_response", details={"text": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:", "duration": duration})
        log_technical(get_user_uuid(user_id), "http_response", details={"status_code": 200, "status": "OK", "duration": duration})
        return JSONResponse(response)
    
    if text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–ø—Ä–æ—Å":
        log_user_activity(get_user_uuid(user_id), "saved_query_action", {"action": "add_store_prompt", "query_index": idx})
        await set_state(user_id, STATE_ENTERING_STORE)
        response = reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:", saved_query_edit_menu(), disable_web_page_preview=True)
        duration = time.time() - start_time
        log_technical(get_user_uuid(user_id), "bot_response", details={"text": "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:", "duration": duration})
        log_technical(get_user_uuid(user_id), "http_response", details={"status_code": 200, "status": "OK", "duration": duration})
        return JSONResponse(response)
    
    if text == "üóë –£–¥–∞–ª–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω":
        log_user_activity(get_user_uuid(user_id), "saved_query_action", {"action": "remove_store_prompt", "query_index": idx})
        user_data = await get_user_data(user_id)
        stores = user_data["stores"]
        if not stores:
            response = reply("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç", saved_query_edit_menu(), disable_web_page_preview=True)
            duration = time.time() - start_time
            log_technical(get_user_uuid(user_id), "bot_response", details={"text": "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç", "duration": duration})
            log_technical(get_user_uuid(user_id), "http_response", details={"status_code": 200, "status": "OK", "duration": duration})
            return JSONResponse(response)
        response_text = "<b>–í–∞—à —Å–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤:</b>\n"
        for i, store in enumerate(stores, 1):
            response_text += f"{i}. {store}\n"
        response_text += "\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–∞–≥–∞–∑–∏–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å."
        response = reply(response_text, saved_query_edit_menu(), disable_web_page_preview=True)
        duration = time.time() - start_time
        log_technical(get_user_uuid(user_id), "bot_response", details={"text": response_text, "duration": duration})
        log_technical(get_user_uuid(user_id), "http_response", details={"status_code": 200, "status": "OK", "duration": duration})
        return JSONResponse(response)
    
    if text.isdigit():
        index = int(text) - 1
        user_data = await get_user_data(user_id)
        stores = user_data["stores"]
        if 0 <= index < len(stores):
            removed = stores.pop(index)
            queries[idx]["stores"] = list(stores)
            save_saved_queries(get_user_uuid(user_id), queries)
            user_data["stores"] = stores
            await set_user_data(user_id, user_data)
            log_user_activity(get_user_uuid(user_id), "query_stores_updated", {"removed_store": removed, "stores": stores, "method": "by_number"})
            await set_state(user_id, STATE_EDITING_SAVED_QUERY_STORES_MENU)
            response = reply(f"–ú–∞–≥–∞–∑–∏–Ω <b>{removed}</b> —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞", saved_query_edit_menu(), disable_web_page_preview=True)
            duration = time.time() - start_time
            log_technical(get_user_uuid(user_id), "bot_response", details={"text": f"–ú–∞–≥–∞–∑–∏–Ω <b>{removed}</b> —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞", "duration": duration})
            log_technical(get_user_uuid(user_id), "http_response", details={"status_code": 200, "status": "OK", "duration": duration})
            return JSONResponse(response)
        else:
            log_user_activity(get_user_uuid(user_id), "input_error", {"error": "invalid_store_number_in_saved", "input": text, "max_valid": len(stores)})
            response = reply("–ü–æ—Ö–æ–∂–µ, –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –º–∞–≥–∞–∑–∏–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", saved_query_edit_menu(), disable_web_page_preview=True)
            duration = time.time() - start_time
            log_technical(get_user_uuid(user_id), "bot_response", details={"text": "–ü–æ—Ö–æ–∂–µ, –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –º–∞–≥–∞–∑–∏–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", "duration": duration})
            log_technical(get_user_uuid(user_id), "http_response", details={"status_code": 200, "status": "OK", "duration": duration})
            return JSONResponse(response)
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    corrected = correct_store_name(text, ALL_STORES)
    if not corrected:
        log_user_activity(get_user_uuid(user_id), "store_not_found_in_saved", {"input": text, "query_index": idx})
        response = reply(f"‚ùå –ú–∞–≥–∞–∑–∏–Ω <b>{text}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", saved_query_edit_menu(), disable_web_page_preview=True)
        duration = time.time() - start_time
        log_technical(get_user_uuid(user_id), "bot_response", details={"text": f"‚ùå –ú–∞–≥–∞–∑–∏–Ω <b>{text}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", "duration": duration})
        log_technical(get_user_uuid(user_id), "http_response", details={"status_code": 200, "status": "OK", "duration": duration})
        return JSONResponse(response)
    
    user_data = await get_user_data(user_id)
    if corrected.lower() in [s.lower() for s in user_data["stores"]]:
        log_user_activity(get_user_uuid(user_id), "store_already_exists_in_saved", {"store": corrected, "input": text, "query_index": idx})
        response = reply(f"üîÅ –ú–∞–≥–∞–∑–∏–Ω <b>{corrected}</b> —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ.", saved_query_edit_menu(), disable_web_page_preview=True)
        duration = time.time() - start_time
        log_technical(get_user_uuid(user_id), "bot_response", details={"text": f"üîÅ –ú–∞–≥–∞–∑–∏–Ω <b>{corrected}</b> —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ.", "duration": duration})
        log_technical(get_user_uuid(user_id), "http_response", details={"status_code": 200, "status": "OK", "duration": duration})
        return JSONResponse(response)
    
    user_data["stores"] = user_data["stores"] + [corrected]
    await set_user_data(user_id, user_data)
    user_data = await get_user_data(user_id)
    queries[idx]["stores"] = list(user_data["stores"])
    save_saved_queries(get_user_uuid(user_id), queries)
    log_user_activity(get_user_uuid(user_id), "query_stores_updated", {"added_store": corrected, "stores": user_data["stores"], "input": text, "was_corrected": text != corrected})
    response_text = f"<b>–ú–∞–≥–∞–∑–∏–Ω –¥–æ–±–∞–≤–ª–µ–Ω:</b> {corrected}\n\n"
    response_text += "<b>–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫:</b>\n"
    for i, store in enumerate(user_data["stores"], 1):
        response_text += f"{i}. {store}\n"
    response = reply(response_text, saved_query_edit_menu(), disable_web_page_preview=True)
    duration = time.time() - start_time
    log_technical(get_user_uuid(user_id), "bot_response", details={"text": response_text, "duration": duration})
    log_technical(get_user_uuid(user_id), "http_response", details={"status_code": 200, "status": "OK", "duration": duration})
    return JSONResponse(response)

@app.post("/handle_update")
async def handle_update(request: Request):
    start_time = time.time()
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π HTTP –∑–∞–ø—Ä–æ—Å
    log_technical(None, "http_request", details={
        "method": "POST",
        "path": "/handle_update",
        "timestamp": datetime.now().isoformat()
    })
    
    try:
        check_token(request)
        data = await request.json()
        user_id = data.get("user_id")
        text = (data.get("text") or "").strip()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–≥ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        log_technical(get_user_uuid(user_id), "http_request", details={
            "method": "POST",
            "path": "/handle_update",
            "user_id": user_id,
            "text": text[:100] if text else None,  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
            "timestamp": datetime.now().isoformat()
        })
        
        if not user_id:
            response = reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.", disable_web_page_preview=True)
            duration = time.time() - start_time
            log_technical(get_user_uuid(user_id), "bot_response", details={"text": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.", "duration": duration})
            log_technical(get_user_uuid(user_id), "http_response", details={"status_code": 200, "status": "OK", "duration": duration})
            return JSONResponse(response)
        
        user_data = await get_user_data(user_id)
        state = await get_state(user_id)

        # /start
        if text == "/start":
            return await handle_start_command(user_id, start_time)

        # FSM: –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞
        if state == STATE_CHOOSING_CITY:
            return await handle_city_selection(user_id, text, start_time)

        # FSM: –≤–≤–æ–¥ –º–∞–≥–∞–∑–∏–Ω–æ–≤
        if state == STATE_ENTERING_STORE:
            # –û–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤—Å–µ–≥–¥–∞, –¥–∞–∂–µ –µ—Å–ª–∏ –µ—Å—Ç—å current_query_index)
            if text == "üßæ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å":
                return await handle_store_editing(user_id, start_time)
            if text == "üîÅ –°–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥":
                return await handle_city_change(user_id, start_time)
            if text == "üîç –ò—Å–∫–∞—Ç—å":
                return await handle_mall_search(user_id, start_time)
            if text == "üóë –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫":
                return await handle_clear_stores_list(user_id, start_time)
            if text == "üìú –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤":
                return await handle_show_saved_queries(user_id, start_time)
            if text == "üõçÔ∏è –î–æ–±–∞–≤–∏—Ç—å":
                return await handle_add_store_prompt(user_id, start_time)
            if text == "üÜï –ù–æ–≤—ã–π –ø–æ–∏—Å–∫":
                return await handle_new_search(user_id, start_time)
            user_data = await get_user_data(user_id)
            if user_data.get("current_query_index") is not None:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è (–≤–∫–ª—é—á–∞—è –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞) —á–µ—Ä–µ–∑ handle_saved_query_stores_editing
                return await handle_saved_query_stores_editing(user_id, text, start_time)
            if text.isdigit():
                return await handle_store_number_input(user_id, text, start_time)
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞
            return await handle_store_name_input(user_id, text, start_time)

        # FSM: —Ä–∞–±–æ—Ç–∞ —Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
        if state == STATE_EDITING_SAVED_QUERY:
            return await handle_saved_query_actions(user_id, text, start_time)

        # FSM: –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
        if state == STATE_RENAMING_QUERY_NAME:
            return await handle_query_renaming(user_id, text, start_time)

        # FSM: —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ
        if state == STATE_EDITING_SAVED_QUERY_STORES_MENU:
            return await handle_saved_query_stores_editing(user_id, text, start_time)

        # FSM: –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        if state == STATE_ENTERING_QUERY_NAME:
            user_data = await get_user_data(user_id)
            query_name = text.strip()
            if not query_name:
                response = reply("–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:", disable_web_page_preview=True)
                duration = time.time() - start_time
                log_technical(get_user_uuid(user_id), "bot_response", details={"text": "–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:", "duration": duration})
                log_technical(get_user_uuid(user_id), "http_response", details={"status_code": 200, "status": "OK", "duration": duration})
                return JSONResponse(response)
            queries = load_saved_queries(get_user_uuid(user_id))
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π id
            if queries:
                max_id = max(q.get("id", 0) for q in queries)
                new_id = max_id + 1
            else:
                new_id = 1
            new_query = {"id": new_id, "name": query_name, "stores": list(user_data.get("stores", [])), "city": user_data.get("city")}
            queries.append(new_query)
            save_saved_queries(get_user_uuid(user_id), queries)
            user_data["current_query_index"] = None
            await set_user_data(user_id, user_data)
            await set_state(user_id, STATE_ENTERING_STORE)
            response = reply(f"‚úÖ –ó–∞–ø—Ä–æ—Å <b>{query_name}</b> —Å–æ—Ö—Ä–∞–Ω—ë–Ω!", after_store_menu(), disable_web_page_preview=True)
            duration = time.time() - start_time
            log_technical(get_user_uuid(user_id), "bot_response", details={"text": f"‚úÖ –ó–∞–ø—Ä–æ—Å <b>{query_name}</b> —Å–æ—Ö—Ä–∞–Ω—ë–Ω!", "duration": duration})
            log_technical(get_user_uuid(user_id), "http_response", details={"status_code": 200, "status": "OK", "duration": duration})
            return JSONResponse(response)

        # fallback
        log_user_activity(get_user_uuid(user_id), "navigation", {"action": "fallback_to_start"})
        response = reply("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å –∫–æ–º–∞–Ω–¥—ã /start", city_menu(), disable_web_page_preview=True)
        duration = time.time() - start_time
        log_technical(get_user_uuid(user_id), "bot_response", details={"text": "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å –∫–æ–º–∞–Ω–¥—ã /start", "duration": duration})
        log_technical(get_user_uuid(user_id), "http_response", details={"status_code": 200, "status": "OK", "duration": duration})
        return JSONResponse(response)
        
    except HTTPException as e:
        duration = time.time() - start_time
        log_technical(None, "http_response", details={"status_code": e.status_code, "status": e.detail, "duration": duration})
        raise
    except Exception as e:
        duration = time.time() - start_time
        log_technical(None, "http_response", details={"status_code": 500, "status": "Internal Server Error", "error": str(e), "duration": duration})
        raise

@app.post("/handle_callback")
async def handle_callback(request: Request):
    start_time = time.time()
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π HTTP –∑–∞–ø—Ä–æ—Å
    log_technical(None, "http_request", details={
        "method": "POST", 
        "path": "/handle_callback",
        "timestamp": datetime.now().isoformat()
    })
    
    try:
        check_token(request)
        data = await request.json()
        user_id = data.get("user_id")
        callback_data = data.get("callback_data")
        message_id = data.get("message_id")
        chat_id = data.get("chat_id")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–≥ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        log_technical(get_user_uuid(user_id), "http_request", details={
            "method": "POST", 
            "path": "/handle_callback",
            "user_id": user_id,
            "callback_data": callback_data,
            "message_id": message_id,
            "chat_id": chat_id,
            "timestamp": datetime.now().isoformat()
        })
        
        if not user_id or not callback_data:
            response = reply("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞.", disable_web_page_preview=True)
            duration = time.time() - start_time
            log_technical(get_user_uuid(user_id), "bot_response", details={"text": "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞.", "duration": duration})
            log_technical(get_user_uuid(user_id), "http_response", details={"status_code": 200, "status": "OK", "duration": duration})
            return JSONResponse(response)
        state = await get_state(user_id)
        log_technical(get_user_uuid(user_id), "callback_query", details={"callback_data": callback_data, "state": state})

        # wrong_store::<user_input_index>::<corrected_index>
        if callback_data.startswith("wrong_store::"):
            log_user_activity(get_user_uuid(user_id), "callback_action", {"action": "wrong_store_correction"})
            log_technical(get_user_uuid(user_id), "debug", details={"message": f"Processing wrong_store callback: {callback_data}"})
            parts = callback_data.split("::")
            if len(parts) < 3 or not parts[1].isdigit() or not parts[2].isdigit():
                response = reply("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.", disable_web_page_preview=True)
                duration = time.time() - start_time
                log_technical(get_user_uuid(user_id), "bot_response", details={"text": "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.", "duration": duration})
                log_technical(get_user_uuid(user_id), "http_response", details={"status_code": 200, "status": "OK", "duration": duration})
                return JSONResponse(response)
            user_input_index = int(parts[1])
            corrected_index = int(parts[2])
            log_technical(get_user_uuid(user_id), "debug", details={"message": f"Parsed indices: user_input_index={user_input_index}, corrected_index={corrected_index}"})
            user_data = await get_user_data(user_id)
            store_choices = user_data.get("store_choices", [])
            log_technical(get_user_uuid(user_id), "debug", details={"message": f"Before removal - stores: {user_data.get('stores', [])}, store_choices: {store_choices}"})
            
            # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω –∏–∑ —Å–ø–∏—Å–∫–∞
            stores = user_data.get("stores", [])
            if stores:
                last_added_store = stores[-1]
                user_data["stores"] = stores[:-1]  # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
                await set_user_data(user_id, user_data)
                log_user_activity(get_user_uuid(user_id), "store_removed", {"store": last_added_store, "method": "wrong_store_callback"})
                log_technical(get_user_uuid(user_id), "debug", details={"message": f"Removed store '{last_added_store}', remaining stores: {user_data.get('stores', [])}"})
                log_technical(get_user_uuid(user_id), "debug", details={"message": f"After removal - stores: {user_data.get('stores', [])}, store_choices: {user_data.get('store_choices', [])}"})
            else:
                last_added_store = None
                log_technical(get_user_uuid(user_id), "debug", details={"message": "No stores to remove"})
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥
            log_technical(get_user_uuid(user_id), "debug", details={"message": f"store_choices: {store_choices}, user_input_index: {user_input_index}"})
            if len(store_choices) > 0:
                user_input = store_choices[0]  # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
                log_technical(get_user_uuid(user_id), "debug", details={"message": f"Using store_choices[0] = {user_input}"})
            else:
                # –ï—Å–ª–∏ store_choices –ø—É—Å—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–¥–∞–ª–µ–Ω–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω –∫–∞–∫ –∏—Å—Ö–æ–¥–Ω—ã–π –≤–≤–æ–¥
                if last_added_store:
                    user_input = last_added_store
                    log_technical(get_user_uuid(user_id), "debug", details={"message": f"Using removed store as input: {user_input}"})
                else:
                    user_input = ""
                    log_technical(get_user_uuid(user_id), "debug", details={"message": "No input found, using empty string"})
            
            similar = process.extract(
                user_input,
                ALL_STORES,
                limit=5,
                processor=str.lower,
            ) if process else []
            if not similar:
                response = reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏–µ –º–∞–≥–∞–∑–∏–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Ä—É—á–Ω—É—é", disable_web_page_preview=True)
                duration = time.time() - start_time
                log_technical(get_user_uuid(user_id), "bot_response", details={"text": "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏–µ –º–∞–≥–∞–∑–∏–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Ä—É—á–Ω—É—é", "duration": duration})
                log_technical(get_user_uuid(user_id), "http_response", details={"status_code": 200, "status": "OK", "duration": duration})
                return JSONResponse(response)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤ user_data
            user_data["store_choices"] = [match[0] for match in similar]
            await set_user_data(user_id, user_data)
            log_technical(get_user_uuid(user_id), "debug", details={"message": f"Found {len(similar)} similar stores for '{user_input}': {[match[0] for match in similar]}"})
            log_technical(get_user_uuid(user_id), "debug", details={"message": f"After finding similar stores - stores: {user_data.get('stores', [])}, store_choices: {user_data.get('store_choices', [])}"})
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏
            buttons = [
                [{"text": match[0], "callback_data": f"pick_store::{i}"}] for i, match in enumerate(similar)
            ]
            keyboard = {"inline_keyboard": buttons}
            response = reply(f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω –¥–ª—è: <b>{user_input}</b>", keyboard, disable_web_page_preview=True)
            log_technical(get_user_uuid(user_id), "debug", details={"message": f"Final response - stores: {user_data.get('stores', [])}, store_choices: {user_data.get('store_choices', [])}"})
            duration = time.time() - start_time
            log_technical(get_user_uuid(user_id), "bot_response", details={"text": f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω –¥–ª—è: <b>{user_input}</b>", "duration": duration})
            log_technical(get_user_uuid(user_id), "http_response", details={"status_code": 200, "status": "OK", "duration": duration})
            return JSONResponse(response)

        # pick_store::<index>
        if callback_data.startswith("pick_store::"):
            log_technical(get_user_uuid(user_id), "debug", details={"message": f"Processing pick_store callback: {callback_data}"})
            index_str = callback_data.split("::")[1].strip() if len(callback_data.split("::")) > 1 else None
            if not index_str or not index_str.isdigit():
                response = reply("üè™ –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", disable_web_page_preview=True)
                duration = time.time() - start_time
                log_technical(get_user_uuid(user_id), "bot_response", details={"text": "üè™ –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", "duration": duration})
                log_technical(get_user_uuid(user_id), "http_response", details={"status_code": 200, "status": "OK", "duration": duration})
                return JSONResponse(response)
            index = int(index_str)
            log_technical(get_user_uuid(user_id), "debug", details={"message": f"Parsed index: {index}"})
            user_data = await get_user_data(user_id)
            store_choices = user_data.get("store_choices", [])
            log_technical(get_user_uuid(user_id), "debug", details={"message": f"pick_store - stores: {user_data.get('stores', [])}, store_choices: {store_choices}, index: {index}"})
            if index < 0 or index >= len(store_choices):
                response = reply("üè™ –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", disable_web_page_preview=True)
                duration = time.time() - start_time
                log_technical(get_user_uuid(user_id), "bot_response", details={"text": "üè™ –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", "duration": duration})
                log_technical(get_user_uuid(user_id), "http_response", details={"status_code": 200, "status": "OK", "duration": duration})
                return JSONResponse(response)
            chosen = store_choices[index]
            if chosen.lower() in [s.lower().strip() for s in user_data.get("stores", [])]:
                log_user_activity(get_user_uuid(user_id), "store_already_exists", {"store": chosen, "method": "callback_pick"})
                response = reply(f"üîÅ –ú–∞–≥–∞–∑–∏–Ω <b>{chosen}</b> —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ", disable_web_page_preview=True)
                duration = time.time() - start_time
                log_technical(get_user_uuid(user_id), "bot_response", details={"text": f"üîÅ –ú–∞–≥–∞–∑–∏–Ω <b>{chosen}</b> —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ", "duration": duration})
                log_technical(get_user_uuid(user_id), "http_response", details={"status_code": 200, "status": "OK", "duration": duration})
                return JSONResponse(response)
            user_data["stores"] = user_data.get("stores", []) + [chosen]
            await set_user_data(user_id, user_data)
            user_data = await get_user_data(user_id)
            log_user_activity(get_user_uuid(user_id), "store_added", {"store": chosen, "method": "callback_pick"})
            log_technical(get_user_uuid(user_id), "debug", details={"message": f"Added store '{chosen}', current stores: {user_data.get('stores', [])}"})
            log_technical(get_user_uuid(user_id), "debug", details={"message": f"After adding store - stores: {user_data.get('stores', [])}, store_choices: {user_data.get('store_choices', [])}"})
            response_text = f"<b>–ú–∞–≥–∞–∑–∏–Ω –¥–æ–±–∞–≤–ª–µ–Ω:</b> {chosen}\n\n"
            response_text += "<b>–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫:</b>\n"
            for i, store in enumerate(user_data["stores"], 1):
                response_text += f"{i}. {store}\n"
            # –î–≤–µ –∫–Ω–æ–ø–∫–∏ ‚Äî –∫–∞–∂–¥–∞—è –Ω–∞ —Å–≤–æ–µ–π —Å—Ç—Ä–æ–∫–µ
            # –î–ª—è wrong_store –ø–µ—Ä–µ–¥–∞—ë–º –∏–Ω–¥–µ–∫—Å –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
            user_data = await get_user_data(user_id)
            store_choices = user_data.get("store_choices", [])
            # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
            original_input_index = len(store_choices) - 1 if store_choices else 0
            log_technical(get_user_uuid(user_id), "debug", details={"message": f"Added store '{chosen}', store_choices: {store_choices}, original_input_index: {original_input_index}"})
            keyboard = {"inline_keyboard": [
                [{"text": "‚ùå –≠—Ç–æ –Ω–µ —Ç–æ—Ç –º–∞–≥–∞–∑–∏–Ω", "callback_data": f"wrong_store::0::{index}"}],
                [{"text": "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å", "callback_data": "save_query"}]
            ]}
            response = reply(response_text, keyboard, disable_web_page_preview=True)
            duration = time.time() - start_time
            log_technical(get_user_uuid(user_id), "bot_response", details={"text": response_text, "duration": duration})
            log_technical(get_user_uuid(user_id), "http_response", details={"status_code": 200, "status": "OK", "duration": duration})
            return JSONResponse(response)

        # clear_list
        if callback_data == "clear_list":
            log_user_activity(get_user_uuid(user_id), "callback_action", {"action": "clear_list"})
            await set_user_data(user_id, {"stores": []})
            response = reply("–°–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –æ—á–∏—â–µ–Ω", disable_web_page_preview=True)
            duration = time.time() - start_time
            log_technical(get_user_uuid(user_id), "bot_response", details={"text": "–°–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –æ—á–∏—â–µ–Ω", "duration": duration})
            log_technical(get_user_uuid(user_id), "http_response", details={"status_code": 200, "status": "OK", "duration": duration})
            return JSONResponse(response)

        # save_query
        if callback_data == "save_query":
            log_user_activity(get_user_uuid(user_id), "callback_action", {"action": "save_query_prompt"})
            user_data = await get_user_data(user_id)
            if not user_data.get("stores"):
                response = reply("–°–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –ø—É—Å—Ç, –Ω–µ—á–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å.", disable_web_page_preview=True)
                duration = time.time() - start_time
                log_technical(get_user_uuid(user_id), "bot_response", details={"text": "–°–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –ø—É—Å—Ç, –Ω–µ—á–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å.", "duration": duration})
                log_technical(get_user_uuid(user_id), "http_response", details={"status_code": 200, "status": "OK", "duration": duration})
                return JSONResponse(response)
            await set_state(user_id, STATE_ENTERING_QUERY_NAME)
            response = reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞:", disable_web_page_preview=True)
            duration = time.time() - start_time
            log_technical(get_user_uuid(user_id), "bot_response", details={"text": "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞:", "duration": duration})
            log_technical(get_user_uuid(user_id), "http_response", details={"status_code": 200, "status": "OK", "duration": duration})
            return JSONResponse(response)

        # load_query::<index>
        if callback_data.startswith("load_query::"):
            idx = int(callback_data.split("::")[1])
            queries = load_saved_queries(get_user_uuid(user_id))
            if idx >= len(queries):
                log_user_activity(get_user_uuid(user_id), "error", {"error": "query_index_out_of_range", "requested_index": idx, "available_count": len(queries)})
                response = reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –∏–∑ —Å–ø–∏—Å–∫–∞.", disable_web_page_preview=True)
                duration = time.time() - start_time
                log_technical(get_user_uuid(user_id), "bot_response", details={"text": "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –∏–∑ —Å–ø–∏—Å–∫–∞.", "duration": duration})
                log_technical(get_user_uuid(user_id), "http_response", details={"status_code": 200, "status": "OK", "duration": duration})
                return JSONResponse(response)
            query = queries[idx]
            log_user_activity(get_user_uuid(user_id), "saved_queries_action", {"action": "load_by_callback", "query_index": idx, "query_name": query["name"]})
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ –∑–∞–ø—Ä–æ—Å–µ
            city = query.get("city")
            user_data = await get_user_data(user_id)
            new_data = {
                "stores": list(query["stores"]),
                "current_query_index": idx
            }
            if city:
                new_data["city"] = city
            else:
                # –µ—Å–ª–∏ –≤ query –Ω–µ—Ç –≥–æ—Ä–æ–¥–∞, –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–π
                if "city" in user_data:
                    new_data["city"] = user_data["city"]
            await set_user_data(user_id, new_data)
            await set_state(user_id, STATE_EDITING_SAVED_QUERY)
            response_text = f"–ó–∞–≥—Ä—É–∂–µ–Ω —Å–ø–∏—Å–æ–∫ <b>{query['name']}</b>:\n\n"
            for i, store in enumerate(query["stores"], 1):
                response_text += f"{i}. {store}\n"
            response = reply(response_text, query_menu(), disable_web_page_preview=True)
            duration = time.time() - start_time
            log_technical(get_user_uuid(user_id), "bot_response", details={"text": response_text, "duration": duration})
            log_technical(get_user_uuid(user_id), "http_response", details={"status_code": 200, "status": "OK", "duration": duration})
            return JSONResponse(response)

        duration = time.time() - start_time
        log_technical(get_user_uuid(user_id), "processing_time", details={"handler": "handle_callback", "duration": duration})
        log_user_activity(get_user_uuid(user_id), "error", {"error": "unknown_callback", "callback_data": callback_data})
        response = reply("–ö–Ω–æ–ø–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞ –∏–ª–∏ –±–æ–ª—å—à–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ –º–µ–Ω—é –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.", disable_web_page_preview=True)
        log_technical(get_user_uuid(user_id), "bot_response", details={"text": "–ö–Ω–æ–ø–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞ –∏–ª–∏ –±–æ–ª—å—à–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ –º–µ–Ω—é –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.", "duration": duration})
        log_technical(get_user_uuid(user_id), "http_response", details={"status_code": 200, "status": "OK", "duration": duration})
        return JSONResponse(response)
        
    except HTTPException as e:
        duration = time.time() - start_time
        log_technical(None, "http_response", details={"status_code": e.status_code, "status": e.detail, "duration": duration})
        raise
    except Exception as e:
        duration = time.time() - start_time
        log_technical(None, "http_response", details={"status_code": 500, "status": "Internal Server Error", "error": str(e), "duration": duration})
        raise 