import json
import os
import asyncio
from rapidfuzz import process
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram import Router
from aiogram.client.default import DefaultBotProperties
from config import BOT_TOKEN

USERS_FILE = "users.json"

def load_users():
    if os.path.exists(USERS_FILE):
        with open(USERS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)  # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–æ–∫ []
    return []

def save_users(users):
    with open(USERS_FILE, "w", encoding="utf-8") as f:
        json.dump(users, f, ensure_ascii=False, indent=2)

def update_user_info(user: types.User):
    users = load_users()
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ id
    existing = next((u for u in users if u["id"] == user.id), None)

    if existing:
        existing["last_active"] = now
    else:
        users.append({
            "id": user.id,
            "username": user.username or "",
            "first_name": user.first_name or "",
            "join_date": now,
            "last_active": now
        })

    save_users(users)

# –ó–∞–≥—Ä—É–∂–∞–µ–º malls.json
with open("malls.json", "r", encoding="utf-8") as f:
    MALLS_DATA = json.load(f)

# –ó–∞–≥—Ä—É–∂–∞–µ–º aliases.json
with open("aliases.json", "r", encoding="utf-8") as f:
    STORE_ALIASES = json.load(f)

# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤ –∏–∑ –±–∞–∑—ã
ALL_STORES = set()
for city_data in MALLS_DATA.values():
    for mall in city_data.values():
        ALL_STORES.update(mall["stores"])
ALL_STORES = list(ALL_STORES)

# FSM
class Form(StatesGroup):
    choosing_city = State()
    entering_store = State()

user_data = {}

WELCOME_TEXT = """
<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MallFinder üõçÔ∏è</b>

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –Ω–∞–π—Ç–∏ —Ç–æ—Ä–≥–æ–≤—ã–µ —Ü–µ–Ω—Ç—Ä—ã, –≥–¥–µ –µ—Å—Ç—å –Ω—É–∂–Ω—ã–µ –≤–∞–º –º–∞–≥–∞–∑–∏–Ω—ã.

üõí –ü—Ä–æ—Å—Ç–æ:
1. –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥
2. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–æ–≤
3. –ü–æ–ª—É—á–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –¢–¶ —Å —ç—Ç–∏–º–∏ –º–∞–≥–∞–∑–∏–Ω–∞–º–∏ (—Å –∞–¥—Ä–µ—Å–∞–º–∏ –∏ —ç—Ç–∞–∂–∞–º–∏)

<b>–†–∞–±–æ—Ç–∞—é—Ç —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –∏ —Å–∏–Ω–æ–Ω–∏–º—ã –Ω–∞–∑–≤–∞–Ω–∏–π!</b>
"""


def correct_store_name(user_input, all_known_stores, aliases_threshold=70, stores_threshold=70):
    input_lower = user_input.strip().lower()

    # 1. –ß—ë—Ç–∫–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∞–ª–∏–∞—Å–∞–º
    for official_name, aliases in STORE_ALIASES.items():
        if input_lower in [a.lower() for a in aliases]:
            return official_name

    # 2. –ß—ë—Ç–∫–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ —Å–ø–∏—Å–∫—É –º–∞–≥–∞–∑–∏–Ω–æ–≤
    for store in all_known_stores:
        if store.lower() == input_lower:
            return store

    # 3. –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî fuzzy
    match = process.extractOne(user_input, all_known_stores, score_cutoff=stores_threshold)
    return match[0] if match else None


def search_store_variants_in_mall(user_query, stores_dict):
    # –ò—â–µ—Ç –≤—Å–µ –º–∞–≥–∞–∑–∏–Ω—ã —Å –ø–æ—Ö–æ–∂–∏–º–∏ –∏–º–µ–Ω–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å —É—Ç–æ—á–Ω–µ–Ω–∏–µ–º –∑–¥–∞–Ω–∏—è)
    user_query_lower = user_query.lower()
    matches = [
        (store_name, floor)
        for store_name, floor in stores_dict.items()
        if user_query_lower in store_name.lower()
    ]
    return matches


# –ë–æ—Ç
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()
router = Router()
dp.include_router(router)

# –ú–µ–Ω—é
def city_menu():
    return ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="–ú–æ—Å–∫–≤–∞"), KeyboardButton(text="–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
    ], resize_keyboard=True)

def after_store_menu():
    return ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å"), KeyboardButton(text="üîç –ò—Å–∫–∞—Ç—å")],
        [KeyboardButton(text="üßæ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"), KeyboardButton(text="üîÅ –°–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥")]
    ], resize_keyboard=True)


# –ö–æ–º–∞–Ω–¥—ã

@router.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    await state.clear()
    update_user_info(message.from_user)
    uid = message.from_user.id
    user_data[uid] = {"city": None, "stores": []}
    await message.answer(WELCOME_TEXT)
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥:", reply_markup=city_menu())
    await state.set_state(Form.choosing_city)

async def change_city(message: types.Message, state: FSMContext):
    await state.clear()
    uid = message.from_user.id
    user_data[uid] = {"city": None, "stores": []}
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=city_menu())
    await state.set_state(Form.choosing_city)


@router.message(Command("help"))
async def help_command(message: types.Message):
    await message.answer(WELCOME_TEXT)


@router.message(Form.choosing_city)
async def choose_city(message: types.Message, state: FSMContext):
    city = message.text.strip()
    if city not in MALLS_DATA:
        await message.answer("–ü–æ–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –ú–æ—Å–∫–≤–∞ –∏ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥.")
        return

    user_data[message.from_user.id]["city"] = city
    user_data[message.from_user.id]["stores"] = []
    await state.set_state(Form.entering_store)

    await message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥–æ—Ä–æ–¥: <b>{city}</b>.\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚ûï –î–æ–±–∞–≤–∏—Ç—å ‚Äî –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞\n"
        "üîç –ò—Å–∫–∞—Ç—å ‚Äî –Ω–∞–π—Ç–∏ –¢–¶ —Å –Ω—É–∂–Ω—ã–º–∏ –º–∞–≥–∞–∑–∏–Ω–∞–º–∏\n"
        "üßæ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω—ã\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞",
        reply_markup=after_store_menu()
    )

@router.message(Form.entering_store)
async def handle_store_input(message: types.Message, state: FSMContext):
    uid = message.from_user.id
    text = message.text.strip()
    update_user_info(message.from_user)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ª—É—á–∞–π–Ω–æ —Å–Ω–æ–≤–∞ –≤–≤—ë–ª –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
    if text in MALLS_DATA:
        await message.answer(
            f"‚ùó –í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ –≥–æ—Ä–æ–¥: <b>{user_data[message.from_user.id]['city']}</b>.\n\n"
            "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ <b>—Å–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥</b> ‚Äî –Ω–∞–∂–º–∏—Ç–µ üîÅ –°–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥.\n\n"

            "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚Äî –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞:"
        )
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
    if text == "üßæ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å":
        stores = user_data[uid]["stores"]
        if not stores:
            await message.answer("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
        else:
            response = "<b>–í–∞—à —Å–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤:</b>\n"
            for i, store in enumerate(stores, 1):
                response += f"{i}. {store}\n"
            response += "\n–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω ‚Äî –æ—Ç–ø—Ä–∞–≤—å –µ–≥–æ –Ω–æ–º–µ—Ä."
            await message.answer(response)
        return

    # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ –Ω–æ–º–µ—Ä—É
    if text.isdigit():
        index = int(text) - 1
        stores = user_data[uid]["stores"]
        if 0 <= index < len(stores):
            removed = stores.pop(index)
            await message.answer(f"–ú–∞–≥–∞–∑–∏–Ω <b>{removed}</b> —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞.", reply_markup=after_store_menu())
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.")
        return

    # –°–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥
    if text == "üîÅ –°–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥":
        await change_city(message, state)
        return

    # –ü–æ–∏—Å–∫
    if text == "üîç –ò—Å–∫–∞—Ç—å":
        await perform_search(message)
        return

    # –î–æ–±–∞–≤–∏—Ç—å
    if text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞:")
        return

    # –ù–∞–∑–∞–¥ ‚Äî –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –≥–æ—Ä–æ–¥–∞
    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await state.set_state(Form.choosing_city)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=city_menu())
        return




    # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    corrected = correct_store_name(text, ALL_STORES)

    if not corrected:
        await message.answer(f"‚ùå –ú–∞–≥–∞–∑–∏–Ω <b>{text}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∏–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
    if corrected.lower() in [s.lower() for s in user_data[uid]["stores"]]:
        await message.answer(f"üîÅ –ú–∞–≥–∞–∑–∏–Ω <b>{corrected}</b> —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ.")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º
    user_data[uid]["stores"].append(corrected)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
    response = "<b>–ú–∞–≥–∞–∑–∏–Ω –¥–æ–±–∞–≤–ª–µ–Ω:</b> " + corrected + "\n\n"
    response += "<b>–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫:</b>\n"
    for i, store in enumerate(user_data[uid]["stores"], 1):
        response += f"{i}. {store}\n"

    await message.answer(response, reply_markup=after_store_menu())


# –ü–æ–∏—Å–∫ –¢–¶

async def perform_search(message):
    user_id = message.from_user.id
    city = user_data[user_id].get("city")
    if not city:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ —á–µ—Ä–µ–∑ /start.")
        return

    queries = user_data[user_id].get("stores", [])
    if not queries:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –º–∞–≥–∞–∑–∏–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞.")
        return

    results = []

    for mall_name, mall_data in MALLS_DATA[city].items():
        mall_stores_dict = mall_data.get("stores", {})
        if isinstance(mall_stores_dict, list):
            mall_stores_dict = {store: None for store in mall_stores_dict}

        mall_stores_lower = {
            store.lower(): (store, floor)
            for store, floor in mall_stores_dict.items()
        }

        matched_stores = []
        found_store_queries = set()

        for store_query in queries:
            corrected_query = correct_store_name(store_query, ALL_STORES) or store_query

            if mall_name.strip().lower() == "–º–µ–≥–∞ –±–µ–ª–∞—è –¥–∞—á–∞":
                variants = search_store_variants_in_mall(corrected_query, mall_stores_dict)
                if variants:
                    # –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–º—è —Ç–æ—á–Ω–æ —Å–æ–≤–ø–∞–¥–∞–µ—Ç
                    for name, floor in variants:
                        if name.lower() == corrected_query.lower():
                            matched_stores.append((name, floor))
                            found_store_queries.add(store_query.lower())
            else:
                for store_lower, (original_store, floor) in mall_stores_lower.items():
                    if corrected_query.lower() == store_lower:
                        matched_stores.append((original_store, floor))
                        found_store_queries.add(store_query.lower())
                        break

        if matched_stores:
            results.append((mall_name, mall_data["address"], matched_stores, mall_data, len(found_store_queries)))

    if not results:
        await message.answer("–ú–∞–≥–∞–∑–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã üòî")
        return

    results.sort(key=lambda x: len(x[2]), reverse=True)

    total_user_selected = len(queries)
    full_response = ""

    for mall, address, matched_stores, mall_data, matched_count in results:
        yandex_link = mall_data.get("map_link") or f"https://yandex.ru/maps/?text={address.replace(' ', '+')}"
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –º–∞–≥–∞–∑–∏–Ω–æ–≤ –ø–æ (–Ω–∞–∑–≤–∞–Ω–∏–µ, —ç—Ç–∞–∂)
        matched_stores = list({(name, floor) for name, floor in matched_stores})
        matched_stores.sort(key=lambda x: (x[1] is None, x[1]))

        text = f"üè¨ <b>{mall}</b> ‚Äî {matched_count} / {total_user_selected} –º–∞–≥–∞–∑–∏–Ω–æ–≤\n"
        text += f"<a href='{yandex_link}'>{address}</a>\n\n"

        for name, floor in matched_stores:
            floor_info = f" ‚Äî {floor} —ç—Ç–∞–∂" if floor is not None else ""
            text += f"‚Ä¢ {name}{floor_info}\n"

        full_response += text + "\n"

    await message.answer(full_response.strip(), disable_web_page_preview=True)

@router.message()
async def fallback_handler(message: types.Message, state: FSMContext):
    user_state = await state.get_state()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∏ —Ä–∞–∑—É –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª /start
    uid = message.from_user.id
    if uid not in user_data:
        await start(message, state)
        return

    # –ò–Ω–∞—á–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –¥–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É
    await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    asyncio.run(dp.start_polling(bot))